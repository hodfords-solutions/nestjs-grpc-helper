/* eslint-disable @typescript-eslint/no-unsafe-function-type */
import { isFunction } from '@nestjs/common/utils/shared.utils';
import { ApiPropertyOptions } from '@nestjs/swagger';
import { isEnumProperty } from '../helpers/api-property.helper';
import { PropertyOptionType } from '@hodfords/nestjs-grpc-helper';
import { HbsGeneratorService } from './hbs-generator.service';

export class ServiceTemplateService extends HbsGeneratorService {
    constructor(private packageName: string) {
        super();
    }

    templateServiceAndModel(serviceContent, modelContent, enumContent): string {
        const data = {
            enumContent,
            modelContent,
            serviceContent
        };

        return this.compileTemplate('./service-template.hbs', data);
    }

    modelTemplate(name: string, properties: string[], parentClass: Function) {
        let extendClass = '';
        if (parentClass.name) {
            extendClass = `extends ${parentClass.name}`;
        }

        return { name, properties, extendClass };
    }

    enumTemplate(options: ApiPropertyOptions) {
        const { enum: properties, enumName, type } = options as PropertyOptionType;
        const valueFormatter = (value: any) => (type === 'string' ? `'${value}'` : value);

        return {
            enumName,
            keys: Object.keys(properties)
                .filter((key) => !parseInt(key))
                .map((key) => `${key} = ${valueFormatter(properties[key])}`)
        };
    }

    propertyTemplate(property, type: string): string {
        const isPrimitiveType = ['object', 'string', 'number', 'bool', 'boolean', 'any'].includes(type);
        const isEnumType = isEnumProperty(property.option);
        const isNestedType = !isPrimitiveType && !isEnumType;
        let propertyType = '';
        if (isNestedType) {
            propertyType = `ReturnType<() =>  ${type} ${property.option.isArray ? '[]' : ''}>`;
        } else {
            propertyType = `${type} ${property.option.isArray ? '[]' : ''}`;
        }

        const propertyName = `${property.name}${property.option.required === false ? '?' : ''}: ${propertyType}`;
        let typeDecorator = '';
        if (isNestedType) {
            typeDecorator = `@Type(() => ${type})`;
        }

        const options = { ...property.option, isAutoGenerated: true };

        let propertyOption = JSON.stringify(options);
        if (isFunction(property.option.type)) {
            if (isNestedType) {
                propertyOption = JSON.stringify({ ...options, type: type }).replaceAll(
                    `"type":"${type}"`,
                    `"type": () => ${type}`
                );
            } else {
                propertyOption = JSON.stringify({ ...options, type: type }).replaceAll(
                    `"type":"${type}"`,
                    `"type":${type}`
                );
            }
        }

        let propertyDecorator = `
            @Property(${propertyOption})
        `;
        if (type === 'any') {
            propertyDecorator += `
            @AnyType()
            `;
        }

        return `
        ${propertyDecorator}
        ${typeDecorator}
        ${propertyName}
        `;
    }
}
